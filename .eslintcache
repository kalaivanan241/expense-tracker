[{"/Users/kalaivanangunasekaran/expense-meter/src/index.tsx":"1","/Users/kalaivanangunasekaran/expense-meter/src/serviceWorkerRegistration.ts":"2","/Users/kalaivanangunasekaran/expense-meter/src/reportWebVitals.ts":"3","/Users/kalaivanangunasekaran/expense-meter/src/App.tsx":"4","/Users/kalaivanangunasekaran/expense-meter/src/components/Details/Details.tsx":"5","/Users/kalaivanangunasekaran/expense-meter/src/components/Details/styles.ts":"6","/Users/kalaivanangunasekaran/expense-meter/src/styles.ts":"7","/Users/kalaivanangunasekaran/expense-meter/src/components/Main/Main.tsx":"8","/Users/kalaivanangunasekaran/expense-meter/src/components/Main/styles.ts":"9","/Users/kalaivanangunasekaran/expense-meter/src/components/Main/Form/Form.tsx":"10","/Users/kalaivanangunasekaran/expense-meter/src/components/Main/Form/styles.ts":"11","/Users/kalaivanangunasekaran/expense-meter/src/components/Main/List/List.tsx":"12","/Users/kalaivanangunasekaran/expense-meter/src/components/Main/List/styles.ts":"13","/Users/kalaivanangunasekaran/expense-meter/src/context/context.tsx":"14","/Users/kalaivanangunasekaran/expense-meter/src/context/contextReducer.tsx":"15","/Users/kalaivanangunasekaran/expense-meter/src/constants/categories.ts":"16","/Users/kalaivanangunasekaran/expense-meter/src/utils/utils.ts":"17","/Users/kalaivanangunasekaran/expense-meter/src/useTransactions.ts":"18","/Users/kalaivanangunasekaran/expense-meter/src/components/Snackbar/Snackbar.tsx":"19","/Users/kalaivanangunasekaran/expense-meter/src/components/Snackbar/styles.ts":"20","/Users/kalaivanangunasekaran/expense-meter/src/components/InfoCard.tsx":"21"},{"size":1052,"mtime":1608972123721,"results":"22","hashOfConfig":"23"},{"size":5256,"mtime":1608767071157,"results":"24","hashOfConfig":"23"},{"size":425,"mtime":1608767071157,"results":"25","hashOfConfig":"23"},{"size":1519,"mtime":1608980563943,"results":"26","hashOfConfig":"23"},{"size":819,"mtime":1608971004768,"results":"27","hashOfConfig":"23"},{"size":241,"mtime":1608949237731,"results":"28","hashOfConfig":"23"},{"size":551,"mtime":1608949602374,"results":"29","hashOfConfig":"23"},{"size":1248,"mtime":1608980658185,"results":"30","hashOfConfig":"23"},{"size":489,"mtime":1608951512395,"results":"31","hashOfConfig":"23"},{"size":5545,"mtime":1608979306863,"results":"32","hashOfConfig":"23"},{"size":234,"mtime":1608952009410,"results":"33","hashOfConfig":"23"},{"size":1605,"mtime":1608967964273,"results":"34","hashOfConfig":"23"},{"size":398,"mtime":1608952864175,"results":"35","hashOfConfig":"23"},{"size":1319,"mtime":1608977768744,"results":"36","hashOfConfig":"23"},{"size":1030,"mtime":1608976405190,"results":"37","hashOfConfig":"23"},{"size":1659,"mtime":1608968138070,"results":"38","hashOfConfig":"23"},{"size":336,"mtime":1608968923046,"results":"39","hashOfConfig":"23"},{"size":1153,"mtime":1608970886936,"results":"40","hashOfConfig":"23"},{"size":995,"mtime":1608979262924,"results":"41","hashOfConfig":"23"},{"size":195,"mtime":1608978144796,"results":"42","hashOfConfig":"23"},{"size":462,"mtime":1608979703846,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1yl97te",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/Users/kalaivanangunasekaran/expense-meter/src/index.tsx",[],["91","92"],"/Users/kalaivanangunasekaran/expense-meter/src/serviceWorkerRegistration.ts",[],"/Users/kalaivanangunasekaran/expense-meter/src/reportWebVitals.ts",[],"/Users/kalaivanangunasekaran/expense-meter/src/App.tsx",[],"/Users/kalaivanangunasekaran/expense-meter/src/components/Details/Details.tsx",[],"/Users/kalaivanangunasekaran/expense-meter/src/components/Details/styles.ts",[],"/Users/kalaivanangunasekaran/expense-meter/src/styles.ts",[],"/Users/kalaivanangunasekaran/expense-meter/src/components/Main/Main.tsx",[],"/Users/kalaivanangunasekaran/expense-meter/src/components/Main/styles.ts",[],"/Users/kalaivanangunasekaran/expense-meter/src/components/Main/Form/Form.tsx",["93"],"import React, { ChangeEvent, useState, useContext, useEffect} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport {useSpeechContext} from \"@speechly/react-client\";\nimport  { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem} from \"@material-ui/core\";\nimport  {ExpenseTrackerContext} from \"../../../context/context\"\nimport useStyles from \"./styles\";\nimport { formatDate} from \"../../../utils/utils\";\nimport {incomeCategories, expenseCategories} from \"../../../constants/categories\"\nimport CustomizedSnackbar from '../../Snackbar/Snackbar';\n\n\nconst Form = () => {\n    const classes = useStyles();\n    const initialState = {\n        amount:\"\",\n        date: formatDate(new Date()),\n        type: \"Expense\",\n        category:\"\"\n    }\n    const [transaction, setTransaction] = useState(initialState);\n    const [open, setOpen] = useState(false);\n\n    const { dispatch } = useContext(ExpenseTrackerContext);\n    const { segment } = useSpeechContext();\n    \n    const onFieldChange = (e: ChangeEvent<{name?:string | any, value:unknown}>) => {\n        setTransaction({...transaction,[e.target?.name]:e.target.value})\n    }\n\n    const addTransaction = () => {\n        if(isNaN(Number(transaction.amount)) || !transaction.date.includes(\"-\"))\n            return;\n        dispatch({\n            type:\"ADD_TRANSACTION\",\n            payload:{...transaction, id:uuidv4(), amount:Number(transaction.amount)}\n        })\n        setOpen(true);\n        setTransaction(initialState);  \n    }\n\n    useEffect (() => {\n        console.log(\"segment\",segment);\n        if(segment) {\n            if(segment.intent.intent === \"add_expense\")\n            {\n                setTransaction({...transaction, type:\"Expense\"})\n            }\n            else if(segment.intent.intent === \"add_income\")\n            {\n                setTransaction({...transaction, type:\"Income\"})\n            }\n            else if(segment.isFinal && segment.intent.intent === \"create_transaction\")\n            {\n                return addTransaction()\n            }\n            else if(segment.isFinal && segment.intent.intent === \"cancel_transaction\")\n            {\n                return setTransaction(initialState)\n            }\n        \n\n        segment?.entities.forEach(entity => {\n            \n            switch (entity.type) {\n                case 'amount':\n                    setTransaction({...transaction, amount:entity.value});\n                    break;\n                case 'category':\n                    const category = `${entity.value.charAt(0)}${entity.value.slice(1).toLowerCase()}`;\n                    if(incomeCategories.map(iC => iC.type).includes(category))\n                        setTransaction({...transaction,category: category, type:\"Income\" });\n                    if(expenseCategories.map(iC => iC.type).includes(category))\n                        setTransaction({...transaction,category: category, type:\"Expense\" });\n                    break;\n                case 'date':\n                    setTransaction({...transaction,date: entity.value });\n                    break;\n                default:\n                    break;\n            }\n        })\n        if(segment.isFinal && transaction.amount && transaction.category && transaction.type && transaction.date)\n        {\n            addTransaction();\n        }\n    }\n    },[segment])\n\n    const selectedCategories = transaction.type === \"Income\" ? incomeCategories : expenseCategories;\n\n    return (\n        <Grid container spacing={2}>\n            <CustomizedSnackbar open={open} setOpen={setOpen}></CustomizedSnackbar>\n            <Grid item xs={12}>\n                <Typography align=\"center\" variant=\"subtitle1\" gutterBottom>\n                    {segment ? (\n                    <>\n                        {segment.words.map(w => w.value).join(\" \") }\n                    </>) : \n                    (<>...</>)\n                    }\n                </Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Type</InputLabel>\n                    <Select name=\"type\" onChange={(e) =>onFieldChange(e)} value={transaction.type}>\n                        <MenuItem value=\"Income\"> Income </MenuItem>\n                        <MenuItem value=\"Expense\"> Expense </MenuItem>\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs ={6}>\n                <FormControl fullWidth>\n                    <InputLabel>Category</InputLabel>\n                    <Select name=\"category\" value={transaction.category} onChange={(e) =>onFieldChange(e)}>\n                        {selectedCategories.map(category => (\n                            <MenuItem key={category.type} value={category.type} >{category.type}</MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6}>\n               <TextField type=\"number\" label=\"Amount\" fullWidth name=\"amount\" value={transaction.amount} onChange={(e) =>onFieldChange(e)}/>\n            </Grid>\n            <Grid item xs={6}>\n               <TextField type=\"date\" label=\"Date\" fullWidth InputLabelProps={{\n          shrink: true\n        }} name=\"date\" value={transaction.date} onChange={(e) =>onFieldChange(e)}/>\n            </Grid>\n            <Button className={classes.button} color=\"primary\" fullWidth variant=\n            \"outlined\" onClick={() => addTransaction()}> Create</Button>\n        </Grid>\n    )\n}\n\nexport default Form\n","/Users/kalaivanangunasekaran/expense-meter/src/components/Main/Form/styles.ts",[],["94","95"],"/Users/kalaivanangunasekaran/expense-meter/src/components/Main/List/List.tsx",["96"],"import React, {useContext} from 'react'\nimport {List as MUIList, ListItem, ListItemAvatar, ListItemText, ListItemSecondaryAction, IconButton, Slide, Avatar} from \"@material-ui/core\"\nimport { Delete, MoneyOff} from \"@material-ui/icons\"\n\nimport { ExpenseTrackerContext } from \"./../../../context/context\"\n\nimport useStyles from  \"./styles\"; \n\nconst List = () => {\n    const classes = useStyles();\n    \n    const {state:transactions, dispatch} = useContext(ExpenseTrackerContext);\n\n    const onDelete = (id:string) => {\n        dispatch({\n            type:\"DELETE_TRANSACTION\",\n            payload:id\n        })\n    }\n    \n\n    return (\n        <MUIList dense={false} className={classes.list}>\n            {transactions.map((transaction) => (\n                <Slide direction=\"down\" in mountOnEnter unmountOnExit key={transaction.id}>\n                    <ListItem>\n                        <ListItemAvatar>\n                            <Avatar className={transaction.type === \"Income\" ? classes.avatarIncome : classes.avatarExpense}>\n                                <MoneyOff/>\n                            </Avatar>\n                        </ListItemAvatar>\n                        <ListItemText primary={transaction.category} secondary={`$${transaction.amount} - ${transaction.date}`} />\n                        <ListItemSecondaryAction aria-label=\"delete\" onClick={()=>onDelete(transaction.id) }>\n                            <Delete/>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                </Slide>\n            ))}\n        </MUIList>\n    )\n}\n\nexport default List\n","/Users/kalaivanangunasekaran/expense-meter/src/components/Main/List/styles.ts",[],"/Users/kalaivanangunasekaran/expense-meter/src/context/context.tsx",[],"/Users/kalaivanangunasekaran/expense-meter/src/context/contextReducer.tsx",["97"],"import transitions from \"@material-ui/core/styles/transitions\";\nimport { Reducer } from \"react\";\nimport { TransactionType } from \"./context\";\n\nexport interface ActionType {\n    type:string;\n    payload:any;\n}\n\nconst contextReducer:Reducer<any, ActionType> = (state:[TransactionType], action: ActionType) => {\n    switch (action.type) {\n        case \"DELETE_TRANSACTION\":\n            {\n                const transactions = state.filter((t:TransactionType) => t.id !== action.payload)\n                localStorage.setItem(\"transactions\" , JSON.stringify(transactions));\n                return transactions\n            }\n        case \"ADD_TRANSACTION\":\n            {\n                const transactions = [action.payload,...state] \n                localStorage.setItem(\"transactions\" , JSON.stringify(transactions));\n                return transactions\n            }\n        default:\n            return state;\n    }\n}\n\nexport default contextReducer;\n\n// Reducer  => a function that takes in the old state, and an action => new state\n\n","/Users/kalaivanangunasekaran/expense-meter/src/constants/categories.ts",[],"/Users/kalaivanangunasekaran/expense-meter/src/utils/utils.ts",[],"/Users/kalaivanangunasekaran/expense-meter/src/useTransactions.ts",[],"/Users/kalaivanangunasekaran/expense-meter/src/components/Snackbar/Snackbar.tsx",[],"/Users/kalaivanangunasekaran/expense-meter/src/components/Snackbar/styles.ts",[],"/Users/kalaivanangunasekaran/expense-meter/src/components/InfoCard.tsx",[],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":87,"column":7,"nodeType":"104","endLine":87,"endColumn":16,"suggestions":"105"},{"ruleId":"98","replacedBy":"106"},{"ruleId":"100","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":2,"column":91,"nodeType":"110","messageId":"111","endLine":2,"endColumn":101},{"ruleId":"108","severity":1,"message":"112","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":19},"no-native-reassign",["113"],"no-negated-in-lhs",["114"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addTransaction', 'initialState', and 'transaction'. Either include them or remove the dependency array. You can also do a functional update 'setTransaction(t => ...)' if you only need 'transaction' in the 'setTransaction' call.","ArrayExpression",["115"],["113"],["114"],"@typescript-eslint/no-unused-vars","'IconButton' is defined but never used.","Identifier","unusedVar","'transitions' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},"Update the dependencies array to be: [addTransaction, initialState, segment, transaction]",{"range":"118","text":"119"},[3346,3355],"[addTransaction, initialState, segment, transaction]"]